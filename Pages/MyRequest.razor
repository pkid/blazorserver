@page "/myrequest"

@inject SitterRequestService sitterRequestService
@inject AuthenticationStateProvider authenticationStateProvider


<h1>My Request</h1>

<div class="container">
    <table class="table table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Request Id</th>
                <th>Name</th>
                <th>Start Date Time</th>
                <th>End Date Time</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @if (SitterRequests.Any())
            {
                @foreach (var sitterRequest in SitterRequests)
                {
                    <tr>
                        <td>@sitterRequest.Id</td>
                        <td>@sitterRequest.Name</td>
                        <td>@sitterRequest.StartDateTime.</td>
                        <td>@sitterRequest.EndDateTime</td>
                        <td>@sitterRequest.Description</td>
                        @*<td><button class="btn btn-danger" @onclick="(() => DeleteProduct(product))">Delete</button></td>*@
                    </tr>
                }
            }
            else
            {
                <tr><td colspan="6"><strong>No Sitter Requests available</strong></td></tr>
            }
        </tbody>
    </table>


</div>


@code {

    List<SitterRequest> SitterRequests = new List<SitterRequest>();

    protected override async Task OnInitializedAsync()
    {
        await RefreshSitterRequests();
    }

    private async Task RefreshSitterRequests()
    {
        var authState = await this.authenticationStateProvider.GetAuthenticationStateAsync();
        var email = authState.User.Identity.Name;
        var allSitterRequests = await sitterRequestService.GetSitterRequestsAsync();
        this.SitterRequests = allSitterRequests.Where(it=>it.SitterEmail.Equals(email)).ToList();
    }

}
